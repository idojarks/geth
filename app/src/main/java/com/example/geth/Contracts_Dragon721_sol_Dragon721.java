package com.example.geth;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Contracts_Dragon721_sol_Dragon721 extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b50604080518082018252600980825268447261676f6e37323160b81b6020808401828152855180870190965292855284015281519192916200005691600091620000e5565b5080516200006c906001906020840190620000e5565b50505062000089620000836200008f60201b60201c565b62000093565b620001c8565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000f3906200018b565b90600052602060002090601f01602090048101928262000117576000855562000162565b82601f106200013257805160ff191683800117855562000162565b8280016001018555821562000162579182015b828111156200016257825182559160200191906001019062000145565b506200017092915062000174565b5090565b5b8082111562000170576000815560010162000175565b600181811c90821680620001a057607f821691505b60208210811415620001c257634e487b7160e01b600052602260045260246000fd5b50919050565b61263e80620001d86000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063a22cb46511610071578063a22cb46514610278578063b88d4fde1461028b578063c87b56dd1461029e578063e985e9c5146102b1578063f2fde38b146102ed57600080fd5b8063715018a61461023b5780637299a729146102435780638da5cb5b1461024a57806395d89b411461025b5780639c0cc30c1461026357600080fd5b806323b872dd116100f457806323b872dd146101ce57806342842e0e146101e1578063599888ce146101f45780636352211e1461021557806370a082311461022857600080fd5b806301ffc9a71461013157806306fdde0314610159578063081812fc1461016e578063095ea7b314610199578063167ddf6e146101ae575b600080fd5b61014461013f366004611e18565b610300565b60405190151581526020015b60405180910390f35b610161610352565b6040516101509190611e8d565b61018161017c366004611ea0565b6103e4565b6040516001600160a01b039091168152602001610150565b6101ac6101a7366004611ed5565b610471565b005b6101c16101bc366004611ea0565b610587565b6040516101509190611fa8565b6101ac6101dc366004611fbb565b610a27565b6101ac6101ef366004611fbb565b610a58565b6102076102023660046120a3565b610a73565b604051908152602001610150565b610181610223366004611ea0565b610bd5565b6102076102363660046121b4565b610c4c565b6101ac610cd3565b6000610181565b6007546001600160a01b0316610181565b610161610d09565b61026b610d18565b60405161015091906121cf565b6101ac610286366004612231565b611196565b6101ac61029936600461226d565b6111a5565b6101616102ac366004611ea0565b6111dd565b6101446102bf3660046122e9565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101ac6102fb3660046121b4565b611371565b60006001600160e01b031982166380ac58cd60e01b148061033157506001600160e01b03198216635b5e139f60e01b145b8061034c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546103619061231c565b80601f016020809104026020016040519081016040528092919081815260200182805461038d9061231c565b80156103da5780601f106103af576101008083540402835291602001916103da565b820191906000526020600020905b8154815290600101906020018083116103bd57829003601f168201915b5050505050905090565b60006103ef8261140c565b6104555760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061047c82610bd5565b9050806001600160a01b0316836001600160a01b031614156104ea5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161044c565b336001600160a01b0382161480610506575061050681336102bf565b6105785760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161044c565b6105828383611429565b505050565b6105c76040518060e00160405280606081526020016060815260200160608152602001606081526020016060815260200160008152602001606081525090565b60008281526009602090815260409182902091517fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709261060992909101612357565b6040516020818303038152906040528051906020012014156106635760405162461bcd60e51b81526020600482015260136024820152726e6f6e6578697374656e7420617274776f726b60681b604482015260640161044c565b61066c8261140c565b6106925760405162461bcd60e51b8152602060048201526000602482015260440161044c565b60008281526009602052604090819020815160e081019092528054829082906106ba9061231c565b80601f01602080910402602001604051908101604052809291908181526020018280546106e69061231c565b80156107335780601f1061070857610100808354040283529160200191610733565b820191906000526020600020905b81548152906001019060200180831161071657829003601f168201915b5050505050815260200160018201805461074c9061231c565b80601f01602080910402602001604051908101604052809291908181526020018280546107789061231c565b80156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b505050505081526020016002820180546107de9061231c565b80601f016020809104026020016040519081016040528092919081815260200182805461080a9061231c565b80156108575780601f1061082c57610100808354040283529160200191610857565b820191906000526020600020905b81548152906001019060200180831161083a57829003601f168201915b505050505081526020016003820180546108709061231c565b80601f016020809104026020016040519081016040528092919081815260200182805461089c9061231c565b80156108e95780601f106108be576101008083540402835291602001916108e9565b820191906000526020600020905b8154815290600101906020018083116108cc57829003601f168201915b505050505081526020016004820180546109029061231c565b80601f016020809104026020016040519081016040528092919081815260200182805461092e9061231c565b801561097b5780601f106109505761010080835404028352916020019161097b565b820191906000526020600020905b81548152906001019060200180831161095e57829003601f168201915b505050505081526020016005820154815260200160068201805461099e9061231c565b80601f01602080910402602001604051908101604052809291908181526020018280546109ca9061231c565b8015610a175780601f106109ec57610100808354040283529160200191610a17565b820191906000526020600020905b8154815290600101906020018083116109fa57829003601f168201915b5050505050815250509050919050565b610a313382611497565b610a4d5760405162461bcd60e51b815260040161044c906123f3565b61058283838361157d565b610582838383604051806020016040528060008152506111a5565b6007546000906001600160a01b03163314610aa05760405162461bcd60e51b815260040161044c90612444565b610aae600880546001019055565b6000610ab960085490565b90506040518060e001604052808b81526020018a815260200189815260200188815260200187815260200186815260200185815250600960008381526020019081526020016000206000820151816000019080519060200190610b1d929190611d69565b506020828101518051610b369260018501920190611d69565b5060408201518051610b52916002840191602090910190611d69565b5060608201518051610b6e916003840191602090910190611d69565b5060808201518051610b8a916004840191602090910190611d69565b5060a0820151600582015560c08201518051610bb0916006840191602090910190611d69565b50905050610bbe8382611719565b610bc88189611733565b9998505050505050505050565b6000818152600260205260408120546001600160a01b03168061034c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161044c565b60006001600160a01b038216610cb75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161044c565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b03163314610cfd5760405162461bcd60e51b815260040161044c90612444565b610d0760006117be565b565b6060600180546103619061231c565b60606000610d2560085490565b905060008167ffffffffffffffff811115610d4257610d42611ff7565b604051908082528060200260200182016040528015610db357816020015b610da06040518060e00160405280606081526020016060815260200160608152602001606081526020016060815260200160008152602001606081525090565b815260200190600190039081610d605790505b50905060005b8281101561118f5760096000610dd083600161248f565b81526020019081526020016000206040518060e0016040529081600082018054610df99061231c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e259061231c565b8015610e725780601f10610e4757610100808354040283529160200191610e72565b820191906000526020600020905b815481529060010190602001808311610e5557829003601f168201915b50505050508152602001600182018054610e8b9061231c565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb79061231c565b8015610f045780601f10610ed957610100808354040283529160200191610f04565b820191906000526020600020905b815481529060010190602001808311610ee757829003601f168201915b50505050508152602001600282018054610f1d9061231c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f499061231c565b8015610f965780601f10610f6b57610100808354040283529160200191610f96565b820191906000526020600020905b815481529060010190602001808311610f7957829003601f168201915b50505050508152602001600382018054610faf9061231c565b80601f0160208091040260200160405190810160405280929190818152602001828054610fdb9061231c565b80156110285780601f10610ffd57610100808354040283529160200191611028565b820191906000526020600020905b81548152906001019060200180831161100b57829003601f168201915b505050505081526020016004820180546110419061231c565b80601f016020809104026020016040519081016040528092919081815260200182805461106d9061231c565b80156110ba5780601f1061108f576101008083540402835291602001916110ba565b820191906000526020600020905b81548152906001019060200180831161109d57829003601f168201915b50505050508152602001600582015481526020016006820180546110dd9061231c565b80601f01602080910402602001604051908101604052809291908181526020018280546111099061231c565b80156111565780601f1061112b57610100808354040283529160200191611156565b820191906000526020600020905b81548152906001019060200180831161113957829003601f168201915b505050505081525050828281518110611171576111716124a7565b60200260200101819052508080611187906124bd565b915050610db9565b5092915050565b6111a1338383611810565b5050565b6111af3383611497565b6111cb5760405162461bcd60e51b815260040161044c906123f3565b6111d7848484846118df565b50505050565b60606111e88261140c565b61124e5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b606482015260840161044c565b600082815260066020526040812080546112679061231c565b80601f01602080910402602001604051908101604052809291908181526020018280546112939061231c565b80156112e05780601f106112b5576101008083540402835291602001916112e0565b820191906000526020600020905b8154815290600101906020018083116112c357829003601f168201915b50505050509050600061131b60408051808201909152601581527468747470733a2f2f697066732e696f2f697066732f60581b602082015290565b905080516000141561132e575092915050565b8151156113605780826040516020016113489291906124d8565b60405160208183030381529060405292505050919050565b61136984611912565b949350505050565b6007546001600160a01b0316331461139b5760405162461bcd60e51b815260040161044c90612444565b6001600160a01b0381166114005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161044c565b611409816117be565b50565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061145e82610bd5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006114a28261140c565b6115035760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161044c565b600061150e83610bd5565b9050806001600160a01b0316846001600160a01b031614806115495750836001600160a01b031661153e846103e4565b6001600160a01b0316145b8061136957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16611369565b826001600160a01b031661159082610bd5565b6001600160a01b0316146115f45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161044c565b6001600160a01b0382166116565760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161044c565b611661600082611429565b6001600160a01b038316600090815260036020526040812080546001929061168a908490612507565b90915550506001600160a01b03821660009081526003602052604081208054600192906116b890849061248f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6111a1828260405180602001604052806000815250611a07565b61173c8261140c565b61179f5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161044c565b6000828152600660209081526040909120825161058292840190611d69565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156118725760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161044c565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6118ea84848461157d565b6118f684848484611a3a565b6111d75760405162461bcd60e51b815260040161044c9061251e565b606061191d8261140c565b6119815760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161044c565b60006119b560408051808201909152601581527468747470733a2f2f697066732e696f2f697066732f60581b602082015290565b905060008151116119d55760405180602001604052806000815250611a00565b806119df84611b38565b6040516020016119f09291906124d8565b6040516020818303038152906040525b9392505050565b611a118383611c36565b611a1e6000848484611a3a565b6105825760405162461bcd60e51b815260040161044c9061251e565b60006001600160a01b0384163b15611b2d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a7e903390899088908890600401612570565b6020604051808303816000875af1925050508015611ab9575060408051601f3d908101601f19168201909252611ab6918101906125ad565b60015b611b13573d808015611ae7576040519150601f19603f3d011682016040523d82523d6000602084013e611aec565b606091505b508051611b0b5760405162461bcd60e51b815260040161044c9061251e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611369565b506001949350505050565b606081611b5c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611b865780611b70816124bd565b9150611b7f9050600a836125e0565b9150611b60565b60008167ffffffffffffffff811115611ba157611ba1611ff7565b6040519080825280601f01601f191660200182016040528015611bcb576020820181803683370190505b5090505b841561136957611be0600183612507565b9150611bed600a866125f4565b611bf890603061248f565b60f81b818381518110611c0d57611c0d6124a7565b60200101906001600160f81b031916908160001a905350611c2f600a866125e0565b9450611bcf565b6001600160a01b038216611c8c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161044c565b611c958161140c565b15611ce25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161044c565b6001600160a01b0382166000908152600360205260408120805460019290611d0b90849061248f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611d759061231c565b90600052602060002090601f016020900481019282611d975760008555611ddd565b82601f10611db057805160ff1916838001178555611ddd565b82800160010185558215611ddd579182015b82811115611ddd578251825591602001919060010190611dc2565b50611de9929150611ded565b5090565b5b80821115611de95760008155600101611dee565b6001600160e01b03198116811461140957600080fd5b600060208284031215611e2a57600080fd5b8135611a0081611e02565b60005b83811015611e50578181015183820152602001611e38565b838111156111d75750506000910152565b60008151808452611e79816020860160208601611e35565b601f01601f19169290920160200192915050565b602081526000611a006020830184611e61565b600060208284031215611eb257600080fd5b5035919050565b80356001600160a01b0381168114611ed057600080fd5b919050565b60008060408385031215611ee857600080fd5b611ef183611eb9565b946020939093013593505050565b6000815160e08452611f1460e0850182611e61565b905060208301518482036020860152611f2d8282611e61565b91505060408301518482036040860152611f478282611e61565b91505060608301518482036060860152611f618282611e61565b91505060808301518482036080860152611f7b8282611e61565b91505060a083015160a085015260c083015184820360c0860152611f9f8282611e61565b95945050505050565b602081526000611a006020830184611eff565b600080600060608486031215611fd057600080fd5b611fd984611eb9565b9250611fe760208501611eb9565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561202857612028611ff7565b604051601f8501601f19908116603f0116810190828211818310171561205057612050611ff7565b8160405280935085815286868601111561206957600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261209457600080fd5b611a008383356020850161200d565b600080600080600080600080610100898b0312156120c057600080fd5b883567ffffffffffffffff808211156120d857600080fd5b6120e48c838d01612083565b995060208b01359150808211156120fa57600080fd5b6121068c838d01612083565b985060408b013591508082111561211c57600080fd5b6121288c838d01612083565b975060608b013591508082111561213e57600080fd5b61214a8c838d01612083565b965060808b013591508082111561216057600080fd5b61216c8c838d01612083565b955060a08b0135945060c08b013591508082111561218957600080fd5b506121968b828c01612083565b9250506121a560e08a01611eb9565b90509295985092959890939650565b6000602082840312156121c657600080fd5b611a0082611eb9565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561222457603f19888603018452612212858351611eff565b945092850192908501906001016121f6565b5092979650505050505050565b6000806040838503121561224457600080fd5b61224d83611eb9565b91506020830135801515811461226257600080fd5b809150509250929050565b6000806000806080858703121561228357600080fd5b61228c85611eb9565b935061229a60208601611eb9565b925060408501359150606085013567ffffffffffffffff8111156122bd57600080fd5b8501601f810187136122ce57600080fd5b6122dd8782356020840161200d565b91505092959194509250565b600080604083850312156122fc57600080fd5b61230583611eb9565b915061231360208401611eb9565b90509250929050565b600181811c9082168061233057607f821691505b6020821081141561235157634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168061237357607f831692505b602080841082141561239357634e487b7160e01b86526022600452602486fd5b8180156123a757600181146123b8576123e5565b60ff198616895284890196506123e5565b60008a81526020902060005b868110156123dd5781548b8201529085019083016123c4565b505084890196505b509498975050505050505050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156124a2576124a2612479565b500190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156124d1576124d1612479565b5060010190565b600083516124ea818460208801611e35565b8351908301906124fe818360208801611e35565b01949350505050565b60008282101561251957612519612479565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125a390830184611e61565b9695505050505050565b6000602082840312156125bf57600080fd5b8151611a0081611e02565b634e487b7160e01b600052601260045260246000fd5b6000826125ef576125ef6125ca565b500490565b600082612603576126036125ca565b50069056fea2646970667358221220c90ee1d20f6b1a410b17abaa5d2941144c17a182e8f5d934fb24c90aae35086464736f6c634300080c0033";

    public static final String FUNC_ADDRESSZERO = "addressZero";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETALLARTWORKS = "getAllArtworks";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETARTWORK = "getArtwork";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected Contracts_Dragon721_sol_Dragon721(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Contracts_Dragon721_sol_Dragon721(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Contracts_Dragon721_sol_Dragon721(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Contracts_Dragon721_sol_Dragon721(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<String> addressZero() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADDRESSZERO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getAllArtworks() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLARTWORKS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Artwork>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Artwork> getArtwork(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETARTWORK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Artwork>() {}));
        return executeRemoteCallSingleValueReturn(function, Artwork.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String title, String artist, String metadataURI, String artistAddress, String price, BigInteger mintedDate, String description, String to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(title),
                        new org.web3j.abi.datatypes.Utf8String(artist),
                        new org.web3j.abi.datatypes.Utf8String(metadataURI),
                        new org.web3j.abi.datatypes.Utf8String(artistAddress),
                        new org.web3j.abi.datatypes.Utf8String(price),
                        new org.web3j.abi.datatypes.generated.Uint256(mintedDate),
                        new org.web3j.abi.datatypes.Utf8String(description),
                        new org.web3j.abi.datatypes.Address(160, to)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Contracts_Dragon721_sol_Dragon721 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Contracts_Dragon721_sol_Dragon721(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Contracts_Dragon721_sol_Dragon721 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Contracts_Dragon721_sol_Dragon721(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Contracts_Dragon721_sol_Dragon721 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Contracts_Dragon721_sol_Dragon721(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Contracts_Dragon721_sol_Dragon721 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Contracts_Dragon721_sol_Dragon721(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Contracts_Dragon721_sol_Dragon721> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Contracts_Dragon721_sol_Dragon721.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Contracts_Dragon721_sol_Dragon721> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Contracts_Dragon721_sol_Dragon721.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Contracts_Dragon721_sol_Dragon721> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Contracts_Dragon721_sol_Dragon721.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Contracts_Dragon721_sol_Dragon721> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Contracts_Dragon721_sol_Dragon721.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Artwork extends DynamicStruct {
        public String title;

        public String artist;

        public String metadataURI;

        public String artistAddress;

        public String price;

        public BigInteger mintedDate;

        public String description;

        public Artwork(String title, String artist, String metadataURI, String artistAddress, String price, BigInteger mintedDate, String description) {
            super(new org.web3j.abi.datatypes.Utf8String(title), new org.web3j.abi.datatypes.Utf8String(artist), new org.web3j.abi.datatypes.Utf8String(metadataURI), new org.web3j.abi.datatypes.Utf8String(artistAddress), new org.web3j.abi.datatypes.Utf8String(price), new org.web3j.abi.datatypes.generated.Uint256(mintedDate), new org.web3j.abi.datatypes.Utf8String(description));
            this.title = title;
            this.artist = artist;
            this.metadataURI = metadataURI;
            this.artistAddress = artistAddress;
            this.price = price;
            this.mintedDate = mintedDate;
            this.description = description;
        }

        public Artwork(Utf8String title, Utf8String artist, Utf8String metadataURI, Utf8String artistAddress, Utf8String price, Uint256 mintedDate, Utf8String description) {
            super(title, artist, metadataURI, artistAddress, price, mintedDate, description);
            this.title = title.getValue();
            this.artist = artist.getValue();
            this.metadataURI = metadataURI.getValue();
            this.artistAddress = artistAddress.getValue();
            this.price = price.getValue();
            this.mintedDate = mintedDate.getValue();
            this.description = description.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
